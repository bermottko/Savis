

<div class="container mt-4">
  <h1>Lista de participantes</h1>
  <div class="row justify-content-center">
    <div class="d-flex justify-content-center align-items-center" style="gap: 10px;">
      <input type="search" 
      id="pesquisa" 
      placeholder="Pesquisar usuário por nome ou CPF" 
      class="form-control pesquisa-custom">
      <a href="/admin/viagens/adicionar-participante/<%= viagem.cod %>" class="botao-cadastro">Adicionar Participante</a>
    </div>

    <% (participantes || []).forEach(function(participante) { %>

        <div class="col-12 d-flex justify-content-center">
          <div class="card p-3 shadow-sm mt-2" style="width: 100%; max-width: 720px; background-color: #d1e3fd;">
            <div class="d-flex flex-row align-items-center">

              <img 
                src="<%= participante.Usuario.img ? '/uploads/' + participante.Usuario.img : '/assets/default-profile.jpg' %>" 
                alt="Foto de perfil" 
                class="foto-perfil me-3">

              <div class="flex-grow-1">
                <h5 class="nome-perfil mb-0"><%= participante.Usuario.nome %></h5>
              </div>

              <button class="botao ver-mais-btn" type="button">Ver mais</button> 
              </div>

              <!--VER MAIS-->
              <div class="detalhes">
              <p><strong>Data de Nascimento: </strong><%= participante.Usuario.data_nasc.split('-').reverse().join('/') %></p>
              <hr>
              <p><strong>CPF: </strong><span class="cpf-perfil"><%= participante.Usuario.CPF.replace(/^(\d{3})(\d{3})(\d{3})(\d{2})$/, "$1.$2.$3-$4") %></span></p>
              <hr>
              <p><strong>Gênero: </strong> <%= participante.Usuario.genero.descricao %></p>
              <hr>
              <p><strong>Email: </strong> <%= participante.Usuario.email %></p>
              <hr>
              <p><strong>Telefone: </strong><%= participante.Usuario.fone.replace(/^(\d{2})(\d{5})(\d{4})$/, "($1) $2-$3")
              %></p>
              <hr>
              <p><strong>Endereço: </strong>
                <%= participante.Usuario.endereco?.rua || '' %>, 
                <%= participante.Usuario.endereco?.numero || '' %> - 
                <%= participante.Usuario.endereco?.bairro || '' %> - 
                <%= participante.Usuario.endereco?.cidade || '' %> 
                (<%= participante.Usuario.endereco?.UF || '' %>) 
                CEP: <%= participante.Usuario.endereco?.CEP 
                            ? participante.Usuario.endereco.CEP.replace(/^(\d{5})(\d{3})$/, "$1-$2") 
                            : '' 
                      %>
              </p>
              <hr>
              <p><strong>SUS: </strong> <%= participante.Usuario.SUS %></p>
              <hr>

            </div>
          </div>
        </div>

      <% }) %>
  </div>
</div>

<script>
  const inputPesquisa = document.getElementById('pesquisa');
  const cards = Array.from(document.querySelectorAll('.card')); // colocando os cards dentro de uma array
  const row = document.querySelector('.row');
  

  cards.forEach((card, index) => {                         
    card.setAttribute('data-original-index', index);            // salva o index(posição) original dos cards
  });

  inputPesquisa.addEventListener('input', function () {
    const termo = this.value.trim().toLowerCase();              // padronizando: trim = remove espaços toLowerCase = deixa tudo minusculo

    if (termo.length === 0) {                                   // se a barra de pesquisa ta vazia mostra todos os cards
      cards.forEach(card => {
        card.style.display = 'block';
        card.setAttribute('data-relevancia', '0');              // tira a relevancia 
      });
    
   const fragment = document.createDocumentFragment();

      cards
        .sort((a, b) => a.getAttribute('data-original-index') - b.getAttribute('data-original-index'))    // .sort serve pra reordenar a array
        .forEach(card => fragment.appendChild(card));           // pega os cards e coloca dentro do fragment

      row.appendChild(fragment);                                // colocando o fragment na row

    } else {
      cards.forEach(card => {
        const nomeELemento = card.querySelector('.nome-perfil');  
        const nome = nomeELemento ? nomeELemento.textContent.toLowerCase() : '';  // se o nomeELemento existe transforma em lowercase e guarda no nome se não guarda ' '

        const cpfElemento = card.querySelector('.cpf-perfil');
        const cpf = cpfElemento ? cpfElemento.textContent.replace(/[.\-]/g, '') : '';

        if (nome.startsWith(termo) || cpf.startsWith(termo)) {
          card.style.display = 'block';
          card.setAttribute('data-relevancia', '1');
        } else if (nome.includes(termo) || cpf.includes(termo)) {
          card.style.display = 'block';
          card.setAttribute('data-relevancia', '2');
        } else {
          card.style.display = 'none';
          card.setAttribute('data-relevancia', '99');
        }

      });

      const fragment = document.createDocumentFragment();

      cards
        .filter(card => card.style.display === 'block')
        .sort((a, b) => a.getAttribute('data-relevancia') - b.getAttribute('data-relevancia'))
        .forEach(card => fragment.appendChild(card));

      row.appendChild(fragment);
    }
  });

  // VER MAIS / VER MENOS
  document.querySelectorAll('.ver-mais-btn').forEach(btn => {
    btn.addEventListener('click', function () {
      const card = this.closest('.card');
      const detalhes = card.querySelector('.detalhes');
      const estaExpandido = detalhes.classList.contains('expandido');

      if (estaExpandido) {
        detalhes.style.height = '0px';
        detalhes.style.marginTop = '0';
        detalhes.classList.remove('expandido');
        this.textContent = 'Ver mais';
      } else {
        detalhes.style.height = detalhes.scrollHeight + 'px';
        detalhes.style.marginTop = '16px';
        detalhes.classList.add('expandido');
        this.textContent = 'Ver menos';
      }
    });
  });
</script>

